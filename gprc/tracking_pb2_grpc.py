# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tracking_pb2 as tracking__pb2


class TrackingServiceStub(object):
    """Note: Come back to
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/SafeEntry.TrackingService/Login',
                request_serializer=tracking__pb2.User.SerializeToString,
                response_deserializer=tracking__pb2.User.FromString,
                )
        self.GetAllLocations = channel.unary_stream(
                '/SafeEntry.TrackingService/GetAllLocations',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.Location.FromString,
                )
        self.GetCheckOutOptions = channel.unary_stream(
                '/SafeEntry.TrackingService/GetCheckOutOptions',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.CheckOut.FromString,
                )
        self.CreateCheckInIndividual = channel.unary_unary(
                '/SafeEntry.TrackingService/CreateCheckInIndividual',
                request_serializer=tracking__pb2.Location.SerializeToString,
                response_deserializer=tracking__pb2.Status.FromString,
                )
        self.CreateCheckInGroup = channel.unary_unary(
                '/SafeEntry.TrackingService/CreateCheckInGroup',
                request_serializer=tracking__pb2.Location.SerializeToString,
                response_deserializer=tracking__pb2.Status.FromString,
                )
        self.CreateCheckOut = channel.unary_unary(
                '/SafeEntry.TrackingService/CreateCheckOut',
                request_serializer=tracking__pb2.CheckOut.SerializeToString,
                response_deserializer=tracking__pb2.Status.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/SafeEntry.TrackingService/CreateGroup',
                request_serializer=tracking__pb2.Group.SerializeToString,
                response_deserializer=tracking__pb2.Group.FromString,
                )
        self.AddUserToGroup = channel.stream_unary(
                '/SafeEntry.TrackingService/AddUserToGroup',
                request_serializer=tracking__pb2.User.SerializeToString,
                response_deserializer=tracking__pb2.Status.FromString,
                )
        self.GetSafeEntry = channel.unary_stream(
                '/SafeEntry.TrackingService/GetSafeEntry',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.SafeEntry.FromString,
                )
        self.CreateReportCovidCase = channel.unary_unary(
                '/SafeEntry.TrackingService/CreateReportCovidCase',
                request_serializer=tracking__pb2.Case.SerializeToString,
                response_deserializer=tracking__pb2.Status.FromString,
                )
        self.GetGroupsByUser = channel.unary_stream(
                '/SafeEntry.TrackingService/GetGroupsByUser',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.Group.FromString,
                )


class TrackingServiceServicer(object):
    """Note: Come back to
    """

    def Login(self, request, context):
        """Login procedure
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllLocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCheckOutOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCheckInIndividual(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCheckInGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """5.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUserToGroup(self, request_iterator, context):
        """6. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSafeEntry(self, request, context):
        """8
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateReportCovidCase(self, request, context):
        """9. Self report covid case
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupsByUser(self, request, context):
        """11.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=tracking__pb2.User.FromString,
                    response_serializer=tracking__pb2.User.SerializeToString,
            ),
            'GetAllLocations': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllLocations,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.Location.SerializeToString,
            ),
            'GetCheckOutOptions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCheckOutOptions,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.CheckOut.SerializeToString,
            ),
            'CreateCheckInIndividual': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCheckInIndividual,
                    request_deserializer=tracking__pb2.Location.FromString,
                    response_serializer=tracking__pb2.Status.SerializeToString,
            ),
            'CreateCheckInGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCheckInGroup,
                    request_deserializer=tracking__pb2.Location.FromString,
                    response_serializer=tracking__pb2.Status.SerializeToString,
            ),
            'CreateCheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCheckOut,
                    request_deserializer=tracking__pb2.CheckOut.FromString,
                    response_serializer=tracking__pb2.Status.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=tracking__pb2.Group.FromString,
                    response_serializer=tracking__pb2.Group.SerializeToString,
            ),
            'AddUserToGroup': grpc.stream_unary_rpc_method_handler(
                    servicer.AddUserToGroup,
                    request_deserializer=tracking__pb2.User.FromString,
                    response_serializer=tracking__pb2.Status.SerializeToString,
            ),
            'GetSafeEntry': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSafeEntry,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.SafeEntry.SerializeToString,
            ),
            'CreateReportCovidCase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateReportCovidCase,
                    request_deserializer=tracking__pb2.Case.FromString,
                    response_serializer=tracking__pb2.Status.SerializeToString,
            ),
            'GetGroupsByUser': grpc.unary_stream_rpc_method_handler(
                    servicer.GetGroupsByUser,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.Group.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SafeEntry.TrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackingService(object):
    """Note: Come back to
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/Login',
            tracking__pb2.User.SerializeToString,
            tracking__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SafeEntry.TrackingService/GetAllLocations',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.Location.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCheckOutOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SafeEntry.TrackingService/GetCheckOutOptions',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.CheckOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCheckInIndividual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/CreateCheckInIndividual',
            tracking__pb2.Location.SerializeToString,
            tracking__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCheckInGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/CreateCheckInGroup',
            tracking__pb2.Location.SerializeToString,
            tracking__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/CreateCheckOut',
            tracking__pb2.CheckOut.SerializeToString,
            tracking__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/CreateGroup',
            tracking__pb2.Group.SerializeToString,
            tracking__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUserToGroup(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/SafeEntry.TrackingService/AddUserToGroup',
            tracking__pb2.User.SerializeToString,
            tracking__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSafeEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SafeEntry.TrackingService/GetSafeEntry',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.SafeEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateReportCovidCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SafeEntry.TrackingService/CreateReportCovidCase',
            tracking__pb2.Case.SerializeToString,
            tracking__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupsByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SafeEntry.TrackingService/GetGroupsByUser',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
